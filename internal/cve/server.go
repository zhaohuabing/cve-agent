package cve

import (
	"encoding/json"
	"fmt"
	"math/rand"
	"net/http"
	"time"

	"github.com/robfig/cron/v3"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type Server struct {
	client client.Client
}

func NewServer(client client.Client) *Server {
	s := &Server{
		client: client,
	}
	return s
}

func (s *Server) Start() error {
	// check CVEs on startup
	checkCVEs(s.client)

	// check CVEs every day at a random time to avoid overloading the CVE service
	c := cron.New()
	rand.New(rand.NewSource(time.Now().UnixNano()))
	minute := rand.Intn(60)
	hour := rand.Intn(24)
	spec := fmt.Sprintf("%d %d * * *", minute, hour)

	_, err := c.AddFunc(spec, func() {
		checkCVEs(s.client)
	})
	if err != nil {
		return err
	}
	c.Start()

	http.HandleFunc("/", handler)
	return http.ListenAndServe(":8080", nil)
}

func handler(w http.ResponseWriter, r *http.Request) {
	writeJSON(w, CVECache, r)
}

// writeJSON writes a json payload, handling content type, marshaling, and errors
func writeJSON(w http.ResponseWriter, obj any, req *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	var b []byte
	var err error
	b, err = json.Marshal(obj)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		_, _ = w.Write([]byte(err.Error()))
		return
	}
	_, err = w.Write(b)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
	}
}
