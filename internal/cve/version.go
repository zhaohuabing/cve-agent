package cve

import (
	"context"
	"fmt"
	"time"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/klog"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

func checkCVEs(client client.Client) {
	CVECache.Time = time.Now()

	istioImg, err := getPodImage(client, map[string]string{"app": "istiod"})
	if err != nil {
		klog.Errorf("fail to get istiod pod: %v", err)
	} else {
		//TODO call cve service to get cve list
		CVECache.CVEList[istioImg] = []CVE{
			{
				ID:       "CVE-2023-44487",
				Severity: "HIGH",
				Image:    istioImg,
				Link:     "https://www.cvedetails.com/cve/CVE-2023-44487/",
			},
			{
				ID:       "CVE-2022-39388",
				Severity: "LOW",
				Image:    istioImg,
				Link:     "https://www.cvedetails.com/cve/CVE-2022-39388/",
			},
		}
	}

	envoyImg, err := getPodImage(client, map[string]string{"app": "istio-ingressgateway"})
	if err != nil {
		klog.Errorf("fail to get ingress gateway pod: %v", err)
	} else {
		//TODO call cve service to get cve list
		CVECache.CVEList[envoyImg] = []CVE{
			{
				ID:       "CVE-2023-35945",
				Severity: "MEDIUM",
				Image:    envoyImg,
				Link:     "https://www.cvedetails.com/cve/CVE-2023-35945/",
			},
			{
				ID:       "CVE-2023-35942",
				Severity: "HIGH",
				Image:    envoyImg,
				Link:     "https://www.cvedetails.com/cve/CVE-2023-35942/",
			},
		}
	}
}

func getPodImage(cl client.Client, labels map[string]string) (string, error) {
	pods := &corev1.PodList{}
	err := cl.List(context.Background(), pods, client.MatchingLabels(labels))
	if err != nil {
		return "", err
	}

	if len(pods.Items) == 0 || len(pods.Items[0].Spec.Containers) == 0 {
		return "", fmt.Errorf("no pods found with labels: %v", labels)
	}

	return pods.Items[0].Spec.Containers[0].Image, nil
}
