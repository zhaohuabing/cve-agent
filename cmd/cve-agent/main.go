// Copyright (c) Tetrate, Inc All Rights Reserved.

package main

import (
	"os"
	"os/signal"
	"syscall"

	"github.com/pkg/errors"
	"github.com/spf13/cobra"
	"k8s.io/client-go/tools/clientcmd"
	"k8s.io/klog"
	"sigs.k8s.io/controller-runtime/pkg/client"

	"github.com/zhaohuabing/cve-agent/internal/cve"
)

var kubeConfig string

func main() {
	rootCmd := root()
	if err := rootCmd.Execute(); err != nil {
		klog.Error(err.Error())
		os.Exit(1)
	}
}

func root() (serve *cobra.Command) {
	serve = &cobra.Command{
		Use:   "cve-agent",
		Short: "Starts the cve agent",
		RunE: func(cmd *cobra.Command, args []string) error {
			cfg, err := clientcmd.BuildConfigFromFlags("", kubeConfig)
			if err != nil {
				return errors.Wrapf(err, "failed to create a kube client from the config %q", kubeConfig)
			}
			cl, err := client.New(cfg, client.Options{})
			if err != nil {
				return errors.Wrap(err, "failed to create a kube client from the k8s rest config")
			}

			s := cve.NewServer(cl)
			err = s.Start()
			if err != nil {
				return errors.Wrap(err, "failed to start the cve agent")
			}
			signalChan := make(chan os.Signal, 1)
			signal.Notify(signalChan, syscall.SIGINT, syscall.SIGTERM)
			<-signalChan
			return nil
		},
	}

	serve.PersistentFlags().StringVar(&kubeConfig,
		"kube-config", "", "kubeconfig location; if empty the server will assume it's in a cluster; for local testing use ~/.kube/config")
	return serve
}
